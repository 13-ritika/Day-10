https://leetcode.com/problems/coin-change/

// Sol 1 using recursion
class Solution {
    public int coinChange(int[] coins, int amount) {
        int res= count(coins,coins.length,amount);
        if(res==Integer.MAX_VALUE) return -1;
        return res;
    }
    public int count(int[] coins,int n, int amount) {
        if(amount==0) return 0;
        int res=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(coins[i]<=amount) {
                int sub_res=  count(coins,n,amount-coins[i]);
                if(sub_res!= Integer.MAX_VALUE && sub_res+1<res)
                    res= sub_res+1;
            }
        }
       
        return res;
    }
}

// Sol 2 using recursion

class Solution {
    public int coinChange(int[] coins, int amount) {
        int res= count(coins,coins.length,amount);
        if(res==Integer.MIN_VALUE || res==Integer.MAX_VALUE) return -1;
        return res;
    }
    public int count(int[] coins,int n, int amount) {
        if(amount==0) return 0;
        int res=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(coins[i]<=amount) 
                res= 1+ count(coins,n,amount-coins[i]);
            if(res!=Integer.MAX_VALUE) res = Math.min(res, count(coins,n-1,amount));
               
        }
       
        return res;
    }
}
