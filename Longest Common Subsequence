//https://leetcode.com/problems/longest-common-subsequence/
// dp, medium
// recursive solution

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return lcs(text1, text2, text1.length(), text2.length());
    }
    public int lcs(String s1, String s2,int m, int n) {
        if(m==0|| n==0) return 0;
        if(s1.charAt(m-1)==s2.charAt(n-1)) return 1+ lcs(s1,s2,m-1,n-1);
        else return Math.max(lcs(s1,s2,m,n-1), lcs(s1,s2,m-1,n));
    }
}

// dp memo
class Solution {
    
    public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length()][text2.length()];
        for(int i=0;i<text1.length();i++) Arrays.fill(dp[i],-1);
        return lcs(text1, text2, text1.length(), text2.length(),dp);
    }
    public int lcs(String s1, String s2,int m, int n,int dp[][]) {
        if(m==0|| n==0) return 0;
        if(dp[m-1][n-1]!=-1) return dp[m-1][n-1];
        else{
        if(s1.charAt(m-1)==s2.charAt(n-1)) dp[m-1][n-1]= 1+ lcs(s1,s2,m-1,n-1,dp);
        else dp[m-1][n-1]= Math.max(lcs(s1,s2,m,n-1,dp), lcs(s1,s2,m-1,n,dp));
            }
        return dp[m-1][n-1];
    }
}
